(load "unit-test.scm")

'feature-if-else
'feature-nested-if
'feature-while-loop
'feature-break-continue

(define (interpret program stack)
  (define (stack-not n)
    (if (and n (not (equal? 0 n))) 0 -1))
  (define (stack-and n1 n2)
    (if (and (not (equal? 0 n1)) (not (equal? 0 n2))) -1 0))
  (define (stack-or n1 n2)
    (if (or (not (equal? 0 n1)) (not (equal? 0 n2))) -1 0))
  (define (find-end start)
    (if (equal? (vector-ref program start) 'end)
        (+ 1 start)
        (find-end (+ 1 start))))
  (define (find-endif start)
    (if (equal? (vector-ref program start) 'endif)
        (+ 1 start)
        (find-endif (+ 1 start))))
  (define (find-fwend start)
    (cond ((>= start (vector-length program)) -1)
          ((equal? (vector-ref program start) 'wend) start)
          ((equal? (vector-ref program start) 'repeat) -1)
          (else (find-fwend (+ 1 start)))))
  (define (find-frep start)
    (cond ((< start 0) -1)
          ((equal? (vector-ref program start) 'repeat) start)
          ((equal? (vector-ref program start) 'wend) -1)
          (else (find-frep (- start 1)))))
  (define (find-wend start)
    (define (loop index cntw cntend)
      (cond ((and (equal? (vector-ref program index) 'wend)
                  (= (+ 1 cntend) cntw))
             (+ 1 index))
            ((equal? (vector-ref program index) 'wend)
             (loop (+ 1 index) cntw (+ 1 cntend)))
            ((equal? (vector-ref program index) 'while)
             (loop (+ 1 index) (+ 1 cntw) cntend))
            (else
             (loop (+ 1 index) cntw cntend))))
    (loop start 0 0))
  (define (find-else start)
    (define (loop index cntif cntelse cntend)
      (cond ((and (equal? (vector-ref program index) 'else)
                  (= (+ 1 cntelse) cntif))
             (+ 1 index))
            ((equal? (vector-ref program index) 'else)
             (loop (+ 1 index) cntif (+ 1 cntelse) cntend))
            ((and (equal? (vector-ref program index) 'endif)
                  (= (+ 1 cntend) cntif))
             (+ 1 index))
            ((equal? (vector-ref program index) 'endif)
             (loop (+ 1 index) cntif cntelse (+ 1 cntend)))
            ((equal? (vector-ref program index) 'if)
             (loop (+ 1 index) (+ 1 cntif) cntelse cntend))
            (else
             (loop (+ 1 index) cntif cntelse cntend))))
    (loop start 0 0 0))
  (define (main index stack dict stack-return)
    (if (>= index (vector-length program))
        stack
        (let ((lexem (vector-ref program index)))
          (cond ((number? lexem)
                 (main (+ 1 index) (cons lexem stack) dict stack-return))
                ((equal? lexem '+)
                 (main (+ 1 index)
                       (cons (+ (car stack) (cadr stack)) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem '-)
                 (main (+ 1 index)
                       (cons (- (cadr stack) (car stack)) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem '*)
                 (main (+ 1 index)
                       (cons (* (car stack) (cadr stack)) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem '/)
                 (main (+ 1 index)
                       (cons (/ (cadr stack) (car stack)) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem 'mod)
                 (main (+ 1 index)
                       (cons (remainder (cadr stack) (car stack)) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem 'neg)
                 (main (+ 1 index) (cons (- (car stack)) (cdr stack)) dict stack-return))
                ((equal? lexem '=)
                 (main (+ 1 index)
                       (cons (if (= (cadr stack) (car stack)) -1 0) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem '>)
                 (main (+ 1 index)
                       (cons (if (> (cadr stack) (car stack)) -1 0) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem '<)
                 (main (+ 1 index)
                       (cons (if (< (cadr stack) (car stack)) -1 0) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem 'not)
                 (main (+ 1 index)
                       (cons (stack-not (car stack)) (cdr stack))
                       dict
                       stack-return))
                ((equal? lexem 'and)
                 (main (+ 1 index)
                       (cons (stack-and (car stack) (cadr stack)) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem 'or)
                 (main (+ 1 index)
                       (cons (stack-or (car stack) (cadr stack)) (cddr stack))
                       dict
                       stack-return))
                ((equal? lexem 'drop)
                 (main (+ 1 index) (cdr stack) dict stack-return))
                ((equal? lexem 'swap)
                 (main (+ 1 index)
                       (cons (cadr stack) (cons (car stack) (cddr stack)))
                       dict
                       stack-return))
                ((equal? lexem 'dup)
                 (main (+ 1 index)
                       (cons (car stack) (cons (car stack) (cdr stack)))
                       dict
                       stack-return))
                ((equal? lexem 'over)
                 (main (+ 1 index)
                       (cons (cadr stack) stack)
                       dict
                       stack-return))
                ((equal? lexem 'rot)
                 (main (+ 1 index) (cons (caddr stack)
                                         (cons (cadr stack)
                                               (cons (car stack)
                                                     (cdddr stack)))) dict stack-return))
                ((equal? lexem 'depth)
                 (main (+ 1 index) (cons (length stack) stack) dict stack-return))
                ((equal? lexem 'define)
                 (main (find-end index)
                       stack
                       (cons (list (vector-ref program (+ 1 index)) (+ 2 index)) dict)
                       stack-return))
                ((equal? lexem 'repeat)
                 (main (+ 1 index) stack dict (cons (+ 1 index) stack-return)))
                ((equal? lexem 'while)
                 (if (not (equal? (car stack) 0))
                     (main (+ 1 index) (cdr stack) dict (cons index stack-return))
                     (main (find-wend index) (cdr stack) dict stack-return)))
                ((equal? lexem 'break)
                 (let ((wind (find-fwend index))
                       (rind (find-frep index)))
                   (cond ((= -1 wind)
                          (main (+ 1 rind) stack dict stack-return))
                         ((= -1 rind)
                          (main (+ 1 wind) stack dict stack-return)))))
                ((equal? lexem 'continue)
                 (let ((wind (find-fwend index))
                       (rind (find-frep index)))
                   (cond ((= -1 wind)
                          (main rind stack dict stack-return))
                         ((= -1 rind)
                          (main wind stack dict stack-return)))))
                ((equal? lexem 'if)
                 (if (not (equal? (car stack) 0))
                     (main (+ 1 index) (cdr stack) dict stack-return)
                     (main (find-else index) (cdr stack) dict stack-return)))
                ((equal? lexem 'until)
                 (if (= 0 (car stack))
                     (main (car stack-return) (cdr stack) dict stack-return)
                     (main (+ 1 index) (cdr stack) dict (cdr stack-return))))
                ((equal? lexem 'wend) (main (car stack-return) stack dict (cdr stack-return)))
                ((equal? lexem 'endif) (main (+ 1 index) stack dict stack-return))
                ((equal? lexem 'else) (main (find-endif index) stack dict stack-return))
                ((equal? lexem 'end) (main (car stack-return) stack dict (cdr stack-return)))
                ((equal? lexem 'exit) (main (car stack-return) stack dict (cdr stack-return)))
                ((not (equal? (assq lexem dict) #f))
                 (main (cadr (assq lexem dict)) stack dict (cons (+ 1 index) stack-return)))
                (else 'error)))))
  (main 0 stack '() '()))
