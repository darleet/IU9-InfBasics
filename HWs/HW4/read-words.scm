(define (read-words)
  (let loop ((symbol (read-char))
             (words '())
             (word '()))
    (cond ((and (eof-object? symbol) (not (null? word)))
           (append words (list (list->string word))))
          ((eof-object? symbol) words)
          ((not (or (equal? symbol #\newline)
                    (equal? symbol #\space)
                    (equal? symbol #\tab)))
           (loop (read-char) words (append word (list symbol))))
          ((not (null? word))
           (loop (read-char) (append words (list (list->string word))) '()))
          (else (loop (read-char) words '())))))