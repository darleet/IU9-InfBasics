(define (count x xs)
  (define (loop xs res)
    (if (null? xs)
        res
        (loop (cdr xs)
              (if (equal? x (car xs))
                  (+ res 1)
                  res))))
  (loop xs 0))

(define (delete pred? xs)
  (define (loop xs res)
    (if (null? xs)
        (reverse res)
        (loop (cdr xs)
              (if (not (pred? (car xs)))
                  (cons (car xs) res)
                  res))))
  (loop xs '()))

(define (iterate f x n)
  (define (loop x n res)
    (if (= n 0)
        (reverse res)
        (loop (f x)
              (- n 1)
              (cons x res))))
  (loop x n '()))

(define (intersperse e xs)
  (define (loop xs res)
    (if (null? xs)
        (reverse res)
        (loop (cdr xs)
              (if (equal? (list (car xs)) xs)
                  (cons (car xs) res)
                  (append (list e (car xs)) res)))))
  (loop xs '()))

(define (any? pred? xs)
  (define (loop xs res)
    (if (null? xs)
        res
        (loop (cdr xs)
              (or (pred? (car xs)) res))))
  (loop xs #f))

(define (all? pred? xs)
  (define (loop xs res)
    (if (null? xs)
        res
        (loop (cdr xs)
              (and (pred? (car xs)) res))))
  (loop xs #t))

(define (o . fs)
  (define (loop fs)
    (if (null? fs)
        (lambda (x) x)
        (let ((func (car fs)))
          (if (null? (cdr fs))
              func
              (lambda (x) (func ((loop (cdr fs)) x)))))))
  (loop fs))
    

(define (f x) (+ x 2))
(define (g x) (* x 3))
(define (h x) (- x))